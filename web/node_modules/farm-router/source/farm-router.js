/*! farm_router v0.00.0 | (c) 2015 SAM Staff, Inc. | 

                               \|||/
                               (o o)
                      ------ooO-(_)-Ooo------

*/
// http://stackoverflow.com/questions/13673346/supporting-both-commonjs-and-amd

/*
    premisas

    oflline  pushstate NO hash SI
    servidor pushstate SI hash NO

    Se necesita 

    parar el click 
        para que el servidor no entregue una pagina nueva y todo se vuelva a cargar de 0.

    escuchar el cambio de url
        como el servidor no envia paginas tenemos que controlar la url para ejecutar nuestro scripts.

*/

//https://trac.openstreetmap.org/browser/rails/app/assets/javascripts/router.js?rev=c878b5b8d4eea403ad5838fabcb5847517d130e2

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.farm_router = factory();
    }
}(this, function($) {
    'use strict';


    var routes = [],
        hash = false,
        click = true,
        root = '/',
        base = '',
        running,
        interval;

    var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g, 
        namedParam    = /(\(\?)?:\w+/g,   // - /:\w+/g,  // - /:[^\s/]+/g // /:\w+/g
        optionalParam = /\((.*?)\)/g, 
        splatParam    = /\*\w+/g, 
        routeStripper = /^[#\/]|\s+$/g, 
        trailingSlash = /\/$/;

    var NO_LISTEN = '&no_listen';
    var refresh = true;

    function filterNumber(n) {
      return isNaN(n) ? n : Number(n);
    };

    function getFragment() {
        var fragment = '';
        /*
      
        if(mode === 'history') {
            fragment = clearSlashes(decodeURI(location.pathname + location.search));

            //console.log(fragment)

            fragment = fragment.replace(/\?(.*)$/, '');
            fragment = root != '/' ? fragment.replace(root, '') : fragment;
        } else {
            var match = window.location.href.match(/#(.*)$/);
            fragment = match ? match[1] : '';
        }
        return clearSlashes(fragment);
        */
        
        if(hash){
            var match = window.location.href.match(/#(.*)$/);
            fragment = match ? match[1] : '';
        }else{
            fragment = window.location.pathname + window.location.search;
        }
        //console.log('fragment: ', fragment)

        return fragment.replace(routeStripper, "").replace(trailingSlash, "");
    };

    function clearSlashes(path) {
        return path.toString().replace(trailingSlash, '').replace(/^\//, '');
    };
    function isType(obj, name) {
        return Object.prototype.toString.call(obj) === "[object " + name + "]";
    };
    function routeToRegExp(route) {
        //https://gist.github.com/arendjr/7615549
        route = route
            .replace(escapeRegExp, "\\$&")
            .replace(optionalParam, "(?:$1)?")
            .replace(namedParam, function(match, optional) {
                return optional ? match : "([^/?]+)";
            })
            .replace(splatParam, "([^?]*?)");
        return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
    };

    function Route(path) { // , options
        //options = options || {};
        this.path = (path === '*') ? '(.*)' : path;
        this.regexp = routeToRegExp(this.path);
    };

    /* 
    primera instancia que recoge las rutas, y las coloca en el array routes.
    
    1: Route
        callback: (ctx, next)
        path: "lb"
        regexp: /^lb(?:\?([\s\S]*))?$/
        __proto__: Route
    */

    function farm_router(path, fn) {
        //console.log('@@@@@@@@ path typeof', typeof(path))
        // <callback>
        if (typeof path === 'function') {
            //console.error('@@@@@@@@ path function')
            return farm_router('*', path);
        }
        if (typeof path === 'object') {
            //console.error('@@@@@@@@ path typeof', typeof(path))
            //console.log('path',  path)
            if(path instanceof RegExp){
                var rte = {};
                rte.type = 'regex';
                rte.path = (path === '*') ? '(.*)' : path;
                rte.regexp = path;
                rte.callback = fn;
                routes.push(rte);
            }
            // ejem - farm_router({hash:true});
            else{
                farm_router.start(path);
            }
        }
        // route <path> to <callback ...>
        else if (typeof fn === 'function') {
            //console.error('@@@@@@@@ fn typeof',typeof(fn))

            var rte = new Route(path);
            rte.callback = fn;
            routes.push(rte); 
            //console.log('##### farm_router routes: ', routes) 

        // show <path> with [state]
        } else if (typeof path === 'string') {
            //console.error('@@@@@@@@ path typeof', typeof(path))
            farm_router['string' === typeof fn ? 'redirect' : 'show'](path, fn);
        // start [options]
        } else {
            farm_router.start(path);
        }
    };

    farm_router.start = function(options) {
        options = options || {};
        if (running) return;
        running = true;

        //console.log('_____start: ', options)

        // por aqui solo debe parar una sola vez!!!!
        //alert('NOOOOOOO')

        if (options.hash === true) hash = true;
        if(click) listener();
        
        listen();
        check();
    };

    farm_router.stop = function() {

        if (!running) return;
        running = false;
        listener_off();
    };

    farm_router.show = function(path) {

        //console.log('show - path: ',path)
        //console.log('typeof (history.pushState): ',typeof (history.pushState))

        if( !hash && typeof (history.pushState) != "undefined") {
            //console.log(history.pushState);
            console.error("history in true and history.pushState");

            var obj = {Page: 'page', Url: path};
            history.pushState(obj, obj.Page, obj.Url);
        }
        else{

            //console.error("Browser does not support HTML5, or history in false");
            //console.log( path.substring(0,1) )
            path = path.substring(0,1) !=='/' ? '/'+path : path;
            //console.log('@@@@@@@@ show - path: ', path)
            //console.log('@@@@@@@@ show - window.location.hash: ', window.location.hash )

            //console.log('#######path', path)

            window.location.hash = path;   // '/'+
        }
    };


    function listen() {

        //var self = routes;
        var current = getFragment();

        //console.log( 'listen - current:', current);
        //console.log( 'listen - getFragment:', getFragment());

        var fn = function() {
            //console.log('----------- check -------------');
            //console.log( 'listen - getFragment:', getFragment());
            if(current !== getFragment() && getFragment().indexOf(NO_LISTEN) == -1) {

                //console.log( 'listen - current:', current);
                //console.log( 'listen - getFragment:', getFragment());
                //console.log('----------- check -------------');

                current = getFragment();
                check(current);
            }
        }
        clearInterval(interval);
        interval = setInterval(fn, 50);
    };

    function check(f) {
        var fragment = f || getFragment();

        //console.log('fragment: ', fragment)

        for(var i=0; i<routes.length; i++) {

            //console.log('route: ',routes[i])

            var match = fragment.match(routes[i].regexp);

            //console.log('match 1: ', match);

            if(match) {
                //console.log('match 2: ', match);
                match.shift();
                //console.log('check match 3: ', match);

               // match = undefined && 

                var params = extractParameters(routes[i].path, match, routes[i].type );
                params.path = fragment;

                //console.log('params', params);

                if (isType(routes[i].callback, "Function")) {
                    //The .apply() function expects it to be an array.
                    routes[i].callback.apply(this, [params]);

                    // Para propagar cambios del m1 al m0
                  if(window.location != window.parent.location){
                      
                      /*  if(fragment.indexOf('&listen=') >= 0)
                            fragment = fragment.substr(0, fragment.indexOf('&listen='));
                        if(refresh)
                            parent.location.hash = '/' + fragment.replace(NO_LISTEN, '') + '&listen=' + parseInt(Math.random()*10000);
                        else{
                            parent.location.hash = '/' + fragment.replace(NO_LISTEN, '') + NO_LISTEN;
                        }*/

                        /*if(fragment.indexOf('&listen=') >= 0)
                            fragment = fragment.substr(0, fragment.indexOf('&listen='));
                        if(refresh)
                            parent.location.hash = '/' + fragment + '&listen=' + parseInt(Math.random()*10000);
                        else
                            parent.location.hash = '/' + fragment;
                        refresh = false;*/
                        parent.location.hash = '/' + fragment;
                    }      
                          
                }

                //routes[i].callback.apply({}, match);
                //routes[i].callback.apply(this, match);
                //return this;
            }           
        }
        return this;
    };
    function extractParameters(path, match, type) {
        //console.log('extractParameters - path:', path)
        //console.log('extractParameters - match:', match)
        //console.log('path: '+ path+' || match: '+ match );

        var params = {},
            vars   = match[0] ? match[0].indexOf('=') : 0;

        //console.log('vars', vars)

        // suponemos que son variables - id=25&ap=33
        if(type ==='regex'){

            params.regex = filterNumber(filterNumber(match[0]));
        }
        else if(vars > 0){
            var v = match[0].split("&");
            for (var i=0; i<v.length; i++) {
                var s = v[i].split('=');
                params[s[0]] = filterNumber(s[1]);
            }
        }
        
        else if(vars < 0){
   
            // suponemos que son slash - tm/22/ap/55
     
            var m = 0;
            var np = path.match( namedParam );
            if (np){
                //console.log('np: ', np)
                for(var i=0; i<np.length; i++) {
                    var key = np[i].replace(':', '');
                    params[key] = filterNumber(match[m]);
                    m++;
                }
            }
            // suponemos que son slash - user/images/hey.gif
            var sp = path.match( splatParam );
            if (sp){
                //console.log('sp: ', sp)
                for(var x=0; x<sp.length; x++) {
                    var key = sp[x].replace('*', '');
                    params[key] = filterNumber(match[m]);
                    m++
                }
            }
    

            /*
            for(var i=0; i<match.length; i++) {    
                if (match[i]){
                    console.log('@@@@@@@@@',match[i])

                    var np = path.match( namedParam );
                    if (np){
                        console.log('np: ', np)
                      
                        var key = np[i].replace(':', '');
                        params[key] = filterNumber(match[i]);
            
                    }
                    var sp = path.match( splatParam );
                    if (sp){
                        console.log('sp: ', sp)
              
                        var key = sp[i].replace('*', '');
                        params[key] = filterNumber(match[i]);
                    }

                }
            }
       */

        }
        // suponemos que esta vacio
        else{

        }
        //console.log('extractParameters - params:', params);
        return params
    };





    /*_____________________________

        recogida del click y paso
    ________________________________*/


    var location   = ('undefined' !== typeof window) && (window.history.location || window.location);
    var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';

    function listener(path) {

        window.addEventListener('popstate', onpopstate, false);
        document.addEventListener(clickEvent, onclick, false);
    };
    function listener_off() {

        document.removeEventListener(clickEvent, onclick, false);
        window.removeEventListener('popstate', onpopstate, false);
    };

    farm_router.base = function(path) {
        if (arguments.length === 0) return base;
        base = path;
    };

    function onpopstate(e) {

        //console.log('@@@@@@@@@@@ farm-router onpopstate: ', e)
    }

    function onclick(e) {

        if (1 !== which(e)) return;

        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
        if (e.defaultPrevented) return;

        // ensure link
        var el = e.target;
        while (el && 'A' !== el.nodeName) el = el.parentNode;
        if (!el || 'A' !== el.nodeName) return;


        // Ignore if tag has
        // 1. "download" attribute
        // 2. rel="external" attribute
        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

        // ensure non-hash for the same path
        var link = el.getAttribute('href');

        //console.log('######## onclick - link: ',link)

        //if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;

        // Check for mailto: in the href
        if (link && link.indexOf('mailto:') > -1) return;

        // check target
        if (el.target) return;

        // x-origin
        if (!sameOrigin(el.href)) return;

        // rebuild path
        var path = el.pathname + el.search + (el.hash || '');
        
        /*
        // strip leading "/[drive letter]:" on NW.js on Windows
        if (typeof process !== 'undefined' && path.match(/^\/[a-zA-Z]:\//)) {
          path = path.replace(/^\/[a-zA-Z]:\//, '/');
        }
        */

        //console.log('######## onclick - path: ', path);

  

        // same page
        var orig = path;

        if (path.indexOf(base) === 0) {
          path = path.substr(base.length);
        }

        //if (hashbang) path = path.replace('#!', '');

        if (base && orig === path) return;
  
        e.preventDefault();
        farm_router.show(orig);    
    }
    /**
    * Event button.
    */

    function which(e) {
        e = e || window.event;
        return null === e.which ? e.button : e.which;
    }
    /**
    * Check if `href` is the same origin.
    */

    function sameOrigin(href) {
        var origin = location.protocol + '//' + location.hostname;
        if (location.port) origin += ':' + location.port;
        return (href && (0 === href.indexOf(origin)));
    }

    /*_____________________________

    FIN recogida del click y paso
    ________________________________*/


    return farm_router;
}));



/*
<script type="text/javascript">
function ChangeUrl(title, url) {
    if (typeof (history.pushState) != "undefined") {
        var obj = { Title: title, Url: url };
        history.pushState(obj, obj.Title, obj.Url);
    } else {
        alert("Browser does not support HTML5.");
    }
}
</script>
<input type="button" value="Page1" onclick="ChangeUrl('Page1', 'Page1.htm');" />
<input type="button" value="Page2" onclick="ChangeUrl('Page2', 'Page2.htm');" />
<input type="button" value="Page3" onclick="ChangeUrl('Page3', 'Page3.htm');" />
*/


        /*

        if (window.history.replaceState) {
           //prevents browser from storing history with each change:
           window.history.replaceState(statedata, title, url);
        }


        // history.pushState({}, null, newUrl);
        // window.history.pushState("object or string", "Title", "/new-url");
        */
        /*
        function ChangeUrl(page, url) {
            if (typeof (history.pushState) != "undefined") {
                var obj = {Page: page, Url: url};
                history.pushState(obj, obj.Page, obj.Url);
            } else {
                window.location.href = "homePage";
                // alert("Browser does not support HTML5.");
            }
        }

        ChangeUrl('Page1', 'homePage');
        */


/*
//interesantes pero no se usan

       --------
        var rou = "/users/:uid/pictures/:pepe/pepito/:oo";

        console.log( rou.match(namedParam ))

        var route = "/users/:uid/pictures/:oo";
        var routeMatcher = new RegExp(route.replace(/:[^\s/]+/g, '([\\w-]+)'));
        var url = "/users/1024/pictures/200";

        console.log(url.match(routeMatcher))
       --------



    function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }

    //http://papermashup.com/read-url-get-variables-withjavascript/
    function getUrlVars(path) {
        // se necesita el ?

        console.log(window.location.href)
        console.log(path)

        var vars = {};
        //var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        var parts = path.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
            vars[key] = value;
        });
        return vars;
    }
    
*/


/*
    var router = {
        routes: [],
        mode: null,
        root: '/',
        config: function(options) {
            this.mode = options && options.mode && options.mode == 'history' && !!(history.pushState) ? 'history' : 'hash';
            this.root = options && options.root ? '/' + this.clearSlashes(options.root) + '/' : '/';
            return this;
        },
        getFragment: function() {
            var fragment = '';
            if(this.mode === 'history') {
                fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
                fragment = fragment.replace(/\?(.*)$/, '');
                fragment = this.root != '/' ? fragment.replace(this.root, '') : fragment;
            } else {
                var match = window.location.href.match(/#(.*)$/);
                fragment = match ? match[1] : '';
            }
            return this.clearSlashes(fragment);
        },
        clearSlashes: function(path) {
            return path.toString().replace(/\/$/, '').replace(/^\//, '');
        },
        add: function(re, handler) {

            console.log('0000000');

            if(typeof re == 'function') {
                handler = re;
                re = '';
            }
            this.routes.push({ re: re, handler: handler});
            return this;
        },
        remove: function(param) {
            for(var i=0, r; i<this.routes.length, r = this.routes[i]; i++) {
                if(r.handler === param || r.re.toString() === param.toString()) {
                    this.routes.splice(i, 1); 
                    return this;
                }
            }
            return this;
        },
        flush: function() {
            this.routes = [];
            this.mode = null;
            this.root = '/';
            return this;
        },
        check: function(f) {
            var fragment = f || this.getFragment();
            for(var i=0; i<this.routes.length; i++) {
                var match = fragment.match(this.routes[i].re);
                if(match) {
                    match.shift();
                    this.routes[i].handler.apply({}, match);
                    return this;
                }           
            }
            return this;
        },
        listen: function() {
            var self = this;
            var current = self.getFragment();
            var fn = function() {
                if(current !== self.getFragment()) {
                    current = self.getFragment();
                    self.check(current);
                }
            }
            clearInterval(this.interval);
            this.interval = setInterval(fn, 50);
            return this;
        },
        navigate: function(path) {
            path = path ? path : '';
            if(this.mode === 'history') {
                history.pushState(null, null, this.root + this.clearSlashes(path));
            } else {
                window.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + path;
            }
            return this;
        }
    }

*/


/*

// configuration
Router.config({ mode: 'history'});

// returning the user to the initial state
Router.navigate();

// adding routes
Router
.add(/about/, function() {
    console.log('about');
})
.add(/products\/(.*)\/edit\/(.*)/, function() {
    console.log('products', arguments);
})
.add(function() {
    console.log('default');
})
.check('/products/12/edit/22').listen();

// forwarding
Router.navigate('/about');

*/



